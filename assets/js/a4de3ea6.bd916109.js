"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1180],{2777:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var n=s(4848),i=s(8453);const r={title:"Structs"},c=void 0,a={id:"guides-concepts/structs",title:"Structs",description:"Win32 API frequently uses C structs to pass data between functions. This",source:"@site/docs/guides-concepts/structs.md",sourceDirName:"guides-concepts",slug:"/guides-concepts/structs",permalink:"/docs/guides-concepts/structs",draft:!1,unlisted:!1,editUrl:"https://github.com/halildurmus/win32/tree/main/website/docs/guides-concepts/structs.md",tags:[],version:"current",lastUpdatedBy:"Halil Durmus",lastUpdatedAt:1722074681e3,frontMatter:{title:"Structs"},sidebar:"mainSidebar",previous:{title:"Memory Allocation",permalink:"/docs/guides-concepts/memory-allocation"},next:{title:"Patterns for Memory Management",permalink:"/docs/guides-concepts/memory-patterns"}},o={},l=[{value:"Creating Structs",id:"creating-structs",level:2},{value:"Accessing Struct Fields",id:"accessing-struct-fields",level:2}];function d(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Win32 API frequently uses ",(0,n.jsx)(t.strong,{children:"C structs"})," to pass data between functions. This\nguide provides detailed information on how to ",(0,n.jsx)(t.strong,{children:"create"}),", ",(0,n.jsx)(t.strong,{children:"pass"}),", and\n",(0,n.jsx)(t.strong,{children:"access"})," struct objects from Dart code."]}),"\n",(0,n.jsx)(t.h2,{id:"creating-structs",children:"Creating Structs"}),"\n",(0,n.jsxs)(t.p,{children:["For example, let's assume you want to call the Win32 API\n",(0,n.jsx)(t.a,{href:"https://learn.microsoft.com/windows/win32/api/winbase/nf-winbase-getsystempowerstatus",children:(0,n.jsx)(t.code,{children:"GetSystemPowerStatus"})}),", which retrieves the current\npower status of the system (e.g., battery or AC powered)."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://pub.dev/documentation/win32/latest/win32/GetSystemPowerStatus.html",children:"Dart function signature"})," looks like this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"int GetSystemPowerStatus(Pointer<SYSTEM_POWER_STATUS> lpSystemPowerStatus) { ... }\n"})}),"\n",(0,n.jsxs)(t.p,{children:["As the documentation indicates, ",(0,n.jsx)(t.a,{href:"https://pub.dev/documentation/win32/latest/win32/SYSTEM_POWER_STATUS-class.html",children:(0,n.jsx)(t.code,{children:"SYSTEM_POWER_STATUS"})}),"\ninherits from ",(0,n.jsx)(t.code,{children:"dart:ffi"}),"'s ",(0,n.jsx)(t.a,{href:"https://api.dart.dev/stable/dart-ffi/Struct-class.html",children:(0,n.jsx)(t.code,{children:"Struct"})})," class."]}),"\n",(0,n.jsxs)(t.p,{children:["To create such a struct, you can use ",(0,n.jsx)(t.code,{children:"calloc"})," to allocate memory for it:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"final lpSystemPowerStatus = calloc<SYSTEM_POWER_STATUS>();\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["Dart also provides ",(0,n.jsx)(t.a,{href:"https://pub.dev/documentation/ffi/latest/ffi/malloc-constant.html",children:(0,n.jsx)(t.code,{children:"malloc"})}),", which corresponds to the equivalent C\nruntime function that allocates ",(0,n.jsx)(t.strong,{children:"uninitialized memory"}),". In practice, ",(0,n.jsx)(t.code,{children:"calloc"}),"\nis a good general choice when writing Windows code, as the performance cost of\n",(0,n.jsx)(t.strong,{children:"initializing memory"})," is negligible compared to the benefits of avoiding\npotential ",(0,n.jsx)(t.strong,{children:"side effects"}),"."]})}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsxs)(t.p,{children:["Some structs include a field (typically the first one) for their ",(0,n.jsx)(t.strong,{children:"size"}),". This\nis usually because they're used with a function that can accept multiple\nvariants of the same struct (e.g., ",(0,n.jsx)(t.code,{children:"WNDCLASS"})," and ",(0,n.jsx)(t.code,{children:"WNDCLASSEX"}),"), with the size\nfield being used to disambiguate the struct being passed."]}),(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"https://dart.dev/language/operators#cascade-notation",children:"Dart cascade notation"})," provides a convenient way to initialize structs like\nthis:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"final wndClass = calloc<WNDCLASSEX>()..ref.cbSize = sizeOf<WNDCLASSEX>();\n"})})]}),"\n",(0,n.jsx)(t.h2,{id:"accessing-struct-fields",children:"Accessing Struct Fields"}),"\n",(0,n.jsxs)(t.p,{children:["To access the fields of ",(0,n.jsx)(t.code,{children:"SYSTEM_POWER_STATUS"})," using ",(0,n.jsx)(t.code,{children:"lpSystemPowerStatus"}),", which\nis of type ",(0,n.jsx)(t.code,{children:"Pointer<SYSTEM_POWER_STATUS>"}),", you can use the ",(0,n.jsx)(t.a,{href:"https://api.dart.dev/stable/dart-ffi/StructPointer/ref.html",children:(0,n.jsx)(t.code,{children:"ref"})}),"\nproperty. This property creates a reference to the struct and provides access to\nits fields directly."]}),"\n",(0,n.jsx)(t.p,{children:"Here's a simple example that demonstrates how to detect the power status of the\nsystem:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",metastring:'title="power_status.dart"',children:"import 'dart:ffi';\n\nimport 'package:ffi/ffi.dart';\nimport 'package:win32/win32.dart';\n\nvoid main() {\n  // highlight-next-line\n  final lpSystemPowerStatus = calloc<SYSTEM_POWER_STATUS>();\n\n  try {\n    final hr = GetSystemPowerStatus(lpSystemPowerStatus);\n    if (SUCCEEDED(hr)) {\n      // highlight-start\n      final SYSTEM_POWER_STATUS(:BatteryFlag, :BatteryLifePercent) =\n          lpSystemPowerStatus.ref;\n      // highlight-end\n      if (BatteryFlag >= 128) {\n        // This value is only less than 128 if a battery is detected.\n        print('No system battery detected.');\n      } else {\n        if (BatteryLifePercent <= 100) {\n          print('Battery detected with $BatteryLifePercent% remaining.');\n        } else {\n          // Windows sets this value to 255 if it can't detect remaining life.\n          print('Battery detected but status unknown.');\n        }\n      }\n    }\n  } finally {\n    free(lpSystemPowerStatus);\n  }\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Here we pass a newly allocated and initialized ",(0,n.jsx)(t.code,{children:"SYSTEM_POWER_STATUS"})," struct to\nthe ",(0,n.jsx)(t.code,{children:"GetSystemPowerStatus"})," function, which fills it with values corresponding to\nthe machine's state. We then access fields of the returned struct by\n",(0,n.jsx)(t.strong,{children:"dereferencing"})," the pointer."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["For a more detailed demonstration of retrieving system information, see the\n",(0,n.jsx)(t.a,{href:"https://github.com/halildurmus/win32/blob/main/examples/sysinfo.dart",children:(0,n.jsx)(t.code,{children:"sysinfo.dart"})})," example."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>a});var n=s(6540);const i={},r=n.createContext(i);function c(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);